diff --git a/dwmblocks.c b/dwmblocks.c
index c8f77b7..adb1e11 100644
--- a/dwmblocks.c
+++ b/dwmblocks.c
@@ -3,6 +3,7 @@
 #include<string.h>
 #include<unistd.h>
 #include<signal.h>
+#include<sys/wait.h>
 #ifndef NO_X
 #include<X11/Xlib.h>
 #endif
@@ -27,14 +28,14 @@ typedef struct {
 #ifndef __OpenBSD__
 void dummysighandler(int num);
 #endif
-void sighandler(int num);
 void getcmds(int time);
 void getsigcmds(unsigned int signal);
 void setupsignals();
-void sighandler(int signum);
+void sighandler(int signum, siginfo_t *si, void *ucontext);
 int getstatus(char *str, char *last);
 void statusloop();
 void termhandler();
+void chldhandler();
 void pstdout();
 #ifndef NO_X
 void setroot();
@@ -60,24 +61,27 @@ void getcmd(const Block *block, char *output)
 {
 	//make sure status is same until output is ready
 	char tempstatus[CMDLENGTH] = {0};
-	strcpy(tempstatus, block->icon);
+	char *statusptr = tempstatus;
+	if (block->signal)
+		*statusptr++ = block->signal;
+	strcpy(statusptr, block->icon);
 	FILE *cmdf = popen(block->command, "r");
 	if (!cmdf)
 		return;
 	int i = strlen(block->icon);
-	fgets(tempstatus+i, CMDLENGTH-i-delimLen, cmdf);
-	i = strlen(tempstatus);
+	fgets(statusptr+i, CMDLENGTH-i-delimLen, cmdf);
+	i = strlen(statusptr);
 	//if block and command output are both not empty
 	if (i != 0) {
 		//only chop off newline if one is present at the end
 		i = tempstatus[i-1] == '\n' ? i-1 : i;
 		if (delim[0] != '\0') {
-			strncpy(tempstatus+i, delim, delimLen);
+			strncpy(statusptr+i, delim, delimLen);
 		}
 		else
 			tempstatus[i++] = '\0';
+		strcpy(output, tempstatus);
 	}
-	strcpy(output, tempstatus);
 	pclose(cmdf);
 }
 
@@ -103,15 +107,18 @@ void getsigcmds(unsigned int signal)
 
 void setupsignals()
 {
+	struct sigaction sa = { .sa_sigaction = sighandler, .sa_flags = SA_SIGINFO };
 #ifndef __OpenBSD__
 	    /* initialize all real time signals with dummy handler */
-    for (int i = SIGRTMIN; i <= SIGRTMAX; i++)
+    for (int i = SIGRTMIN; i <= SIGRTMAX; i++) {
         signal(i, dummysighandler);
+		sigaddset(&sa.sa_mask, i);
+	}
 #endif
 
 	for (unsigned int i = 0; i < LENGTH(blocks); i++) {
 		if (blocks[i].signal > 0)
-			signal(SIGMINUS+blocks[i].signal, sighandler);
+			sigaction(SIGMINUS+blocks[i].signal, &sa, NULL);
 	}
 
 }
@@ -179,10 +186,32 @@ void dummysighandler(int signum)
 }
 #endif
 
-void sighandler(int signum)
+void sighandler(int signum, siginfo_t *si, void *ucontext)
 {
-	getsigcmds(signum-SIGPLUS);
-	writestatus();
+	if (si->si_value.sival_int) {
+		pid_t parent = getpid();
+		if (fork() == 0) {
+#ifndef NO_X
+			if (dpy)
+				close(ConnectionNumber(dpy));
+#endif
+			int i;
+			for (i = 0; i < LENGTH(blocks) && blocks[i].signal != signum-SIGRTMIN; i++);
+
+			char shcmd[1024];
+			sprintf(shcmd, "%s; kill -%d %d", blocks[i].command, SIGRTMIN+blocks[i].signal, parent);
+			char *cmd[] = { "/bin/sh", "-c", shcmd, NULL };
+			char button[2] = { '0' + si->si_value.sival_int, '\0' };
+			setenv("BUTTON", button, 1);
+			setsid();
+			execvp(cmd[0], cmd);
+			perror(cmd[0]);
+			exit(EXIT_SUCCESS);
+		}
+	} else {
+		getsigcmds(signum-SIGPLUS);
+		writestatus();
+	}
 }
 
 void termhandler()
@@ -190,6 +219,11 @@ void termhandler()
 	statusContinue = 0;
 }
 
+void chldhandler()
+{
+	while (0 < waitpid(-1, NULL, WNOHANG));
+}
+
 int main(int argc, char** argv)
 {
 	for (int i = 0; i < argc; i++) {//Handle command line arguments
@@ -206,6 +240,7 @@ int main(int argc, char** argv)
 	delim[delimLen++] = '\0';
 	signal(SIGTERM, termhandler);
 	signal(SIGINT, termhandler);
+	signal(SIGCHLD, chldhandler);
 	statusloop();
 #ifndef NO_X
 	XCloseDisplay(dpy);
